package algStudy;

import java.util.Scanner;

public class alg10828 {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int commandNumber=sc.nextInt();//명령어의 개수
		String command;// 명령어 
		
		Stack stack=new Stack(); //stack 하나 생성 // class로 생성해놓음 
		
		for(int i=0; i<commandNumber; i++){
			command=sc.next();
			
			if(command.equals("pop")){
				stack.pop();
			}else if(command.equals("push")){
				int item=sc.nextInt();//스캐너가 저장할 값을 받음
				stack.push(item); //stack클래스의 push함수가 처리
			}else if(command.equals("size")){
				stack.size();
			}else if(command.equals("empty")){
				stack.empty();
			}else if(command.equals("top")){
				stack.top();
			}
		}
	}
	
	static class Stack{
		private StackNode top; //stack은 후입선출 구조니까 top에서 처리가 됨으로
		private int size=0; 
		
		private class StackNode{ //stack을 구성하는 공간 단위
			int data; //node에 저장될 값
			private StackNode link; //링크, 전의 값 , 쌓인 값 
		}
		
		public void top(){ //맨위의 값을 호출
			if(top==null){ //값이 없으면 -1 
				System.out.println(-1);
			}else{ //값이 있으면 맨위의 data를 호출 
				System.out.println(top.data); //stackNode의 data
			}
		}
		public void empty(){ //비어있는지 확인
			if(top==null){ //비어있으면 1
				System.out.println(1);
			}else{//값이 있으면 0
				System.out.println(0);
			}
		}
		public void push(int item){ //값 저장
			StackNode node=new StackNode(); //노드를 하나생성
			node.data=item; //새로생성한 노드 data에 입력받은 item을 넣는다.
			node.link=top; //새로생성한 노드 link에 이전에 저장되었던 top의 값을 넣는다.
			top=node;//top에는 새로 생성된 노드가 들어가게 된다.
			size++; //사이즈 플러스! 
		//	System.out.println("size:"+size);
		}
		
		public void pop(){ //값 빼서 출력 
			if(top==null){System.out.println(-1);} //값이없으면 -1
			else{
				int item= top.data; //item이라는 변수에 현재 top의 data 저장
				top=top.link; //top노드에 이전 값을 저장한다. 
				System.out.println(item); // top에 있던 값 호출
				size--; //사이즈 마이너스!
			}
		}
		
		public void size(){ //사이즈를 물었으니 사이즈를 출력 
			//사이즈는 pop, push시에 변동 
			System.out.println(size);
		}
	}

}
